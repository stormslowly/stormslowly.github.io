1
00:00:02,110 --> 00:00:05,979
hey guys my name is Vojta Jina and i wanna show you Karma

2
00:00:05,979 --> 00:00:10,190
Javascript Test Runner that we build to make Angular development more fun

3
00:00:10,190 --> 00:00:15,059
because we xxxx in js TDD a lot

4
00:00:15,060 --> 00:00:18,100
and we didn't want to use mocha from node.js

5
00:00:18,100 --> 00:00:21,150
because Angular does a lot DOM manipulation

6
00:00:21,150 --> 00:00:25,150
So to be sure that all these things work across all the different browsers

7
00:00:25,150 --> 00:00:28,810
we really want you execute a test on real browsers

8
00:00:28,810 --> 00:00:31,810
and that's exactly what testacular(Karma) does

9
00:00:31,810 --> 00:00:35,690
it runs JavaScript code in real browsers as well as

10
00:00:35,690 --> 00:00:38,960
any other devices such as your phone and tablet

11
00:00:38,960 --> 00:00:44,750
to the perpose of this tut is to test you javascript code during devlopment

12
00:00:44,750 --> 00:00:50,910
or as a part of continous integration

13
00:00:50,910 --> 00:00:53,559
install Testacular(Karma) actuallyis pretty simple
Karma的安装其实非常的简单

14
00:00:53,559 --> 00:00:57,320
I assume you already have node.js
if don't have, 

15
00:00:57,320 --> 00:00:58,109
just go to nodejs.org

16
00:00:58,109 --> 00:01:01,640
and get from there this should be pretty straight forward

17
00:01:01,640 --> 00:01:05,009
and then go to command line and just type

18
00:01:05,009 --> 00:01:10,289
npm install -g testicular which will install testicular into your global

19
00:01:10,289 --> 00:01:11,740
node module folder

20
00:01:11,740 --> 00:01:14,970
it's more likely you will need to sudo execute this command 

21
00:01:14,970 --> 00:01:18,990
NPM is just the package manager for node.js

22
00:01:18,990 --> 00:01:23,119
it comes bundled together with node.js if you have node.js probably have 

23
00:01:23,119 --> 00:01:24,000
NPM as well

24
00:01:24,000 --> 00:01:27,460
and here we go

25
00:01:27,460 --> 00:01:34,460
you have testicular

26
00:01:34,729 --> 00:01:37,000
so let's grab Angular tutorial

27
00:01:37,000 --> 00:01:40,490
and let's round its unit test using testicular(Karma)

28
00:01:40,490 --> 00:01:45,089
there's only one thing we need and that's a simple configuration file

29
00:01:45,090 --> 00:01:49,880
to recommend you to grab this example config file from github

30
00:01:49,880 --> 00:01:53,390
to download this thing

31
00:01:53,390 --> 00:01:56,580
and

32
00:01:56,580 --> 00:02:00,259
its I'm opening the project of tut

33
00:02:00,259 --> 00:02:04,810
here's the config file 

34
00:02:04,810 --> 00:02:09,110
that downloaded from github and the first option is

35
00:02:09,110 --> 00:02:12,190
interesting for us is the

36
00:02:12,190 --> 00:02:15,959
files array and that's where you

37
00:02:15,959 --> 00:02:21,430
tell testicular which files you wanna know so you can see you can use these

38
00:02:21,430 --> 00:02:22,750
wild character

39
00:02:22,750 --> 00:02:26,350
and these files are basically

40
00:02:26,350 --> 00:02:30,920
they can be either absolute path or they can be relative path

41
00:02:30,920 --> 00:02:34,790
in which case resolve this path on this bashPath

42
00:02:34,790 --> 00:02:38,100
and this basePath again can be

43
00:02:38,100 --> 00:02:41,320
an absolute path or 

44
00:02:41,320 --> 00:02:45,579
it can be relative path on in which case it's gonna be resolved this

45
00:02:45,579 --> 00:02:49,130
to location all this file all configuation file

46
00:02:49,130 --> 00:02:52,470
so in our case we can keep this blank

47
00:02:52,470 --> 00:02:55,590
and let's move on

48
00:02:55,590 --> 00:02:59,320
to autoWatch ,autoWatch is true

49
00:02:59,320 --> 00:03:03,739
that's really important as well because

50
00:03:03,739 --> 00:03:08,160
thats tells testacular to watch all the files

51
00:03:08,160 --> 00:03:12,560
and whenever you change any of those files it will execute all the test

52
00:03:12,560 --> 00:03:16,060
and let's see 

53
00:03:16,060 --> 00:03:20,790
the last one browsers. let's put ChromeCanary in there

54
00:03:20,790 --> 00:03:23,820
and that means that one

55
00:03:23,820 --> 00:03:28,720
testacular is being started it will automatic be captured chrome Canada as well

56
00:03:28,720 --> 00:03:34,840
and there is there's a bunch of other options but these are pretty much

57
00:03:34,840 --> 00:03:38,579
default values just so that you can see what avaiable

58
00:03:38,579 --> 00:03:42,160
options 

59
00:03:42,160 --> 00:03:46,269
but we don't need then now

60
00:03:46,269 --> 00:03:51,359
so let's go backto command line and start testacular

61
00:03:51,359 --> 00:03:55,130
we are passing one argument which is path to the config file

62
00:03:55,130 --> 00:03:59,060
you can see and it automaticly started chrome

63
00:03:59,060 --> 00:04:04,530
and i will go to filters for example, and i press save

64
00:04:04,530 --> 00:04:07,859
all the unit tests are executed immediately

65
00:04:07,859 --> 00:04:11,090
so this is a

66
00:04:11,090 --> 00:04:15,350
simple filtered and basically converts boolean value

67
00:04:15,350 --> 00:04:19,340
into utf8 character which is a 

68
00:04:19,340 --> 00:04:22,619
cross if it's false and it's a check

69
00:04:22,620 --> 00:04:26,830
if it's true so let's say we want to
extend his behavior to

70
00:04:26,830 --> 00:04:30,430
to return a question mark if the values undefined

71
00:04:30,430 --> 00:04:34,090
and then open the related unit test

72
00:04:34,090 --> 00:04:37,739
you can see we are using now Jasmine


73
00:04:37,740 --> 00:04:41,900
which is an awesome testing framework

74
00:04:41,900 --> 00:04:45,229
and  testacular is just a test runner

75
00:04:45,229 --> 00:04:48,250
as it's not a testing framework so you can use
pretty much

76
00:04:48,250 --> 00:04:51,389
any test framework you like

77
00:04:51,389 --> 00:04:54,949
we like Jasmine so so we are using Jasmine

78
00:04:54,949 --> 00:04:58,169
it should convert undefined

79
00:04:58,169 --> 00:05:04,669
to question mark

80
00:05:04,669 --> 00:05:08,889
expect undefined

81
00:05:08,889 --> 00:05:12,380
to be converted to question

82
00:05:12,380 --> 00:05:16,690
now we go we have failing unit test

83
00:05:16,690 --> 00:05:21,750
so do that let me show you something
first let me show you dump

84
00:05:21,750 --> 00:05:25,340
because you can you dump and 

85
00:05:25,340 --> 00:05:30,698
it will dump the value into termimal which is pretty cool because

86
00:05:30,699 --> 00:05:34,240
all these things that's happening real browser

87
00:05:34,240 --> 00:05:39,479
there is a ChromeCanary so you can actually go to console

88
00:05:39,479 --> 00:05:43,389
if you like you can use console.log 

89
00:05:43,389 --> 00:05:49,190
let me show you that.

90
00:05:49,190 --> 00:05:53,259
and you can see anything 

91
00:05:53,259 --> 00:05:57,919
beacuase yeah because unfortunately in
current version of Chrome

92
00:05:57,919 --> 00:06:02,669
there's no consle so let's use
console.log

93
00:06:02,669 --> 00:06:06,590
 and there you go undefined

94
00:06:06,590 --> 00:06:10,469
so if you like use console you can do that but

95
00:06:10,469 --> 00:06:15,000
and thing is pretty cool if you can stay in your text editor as much as possible

96
00:06:15,000 --> 00:06:20,080
and that's when dump is really helpful okay

97
00:06:20,080 --> 00:06:24,539
so let's implement this super killer feature

98
00:06:24,539 --> 00:06:29,460
angular if is undefined

99
00:06:29,460 --> 00:06:33,388
I mean if input is undefine just return '?'

100
00:06:33,389 --> 00:06:37,780
there you go and

101
00:06:37,780 --> 00:06:42,289
it works. awesome.

102
00:06:42,289 --> 00:06:46,818
this is how you can use Karma from command line

103
00:06:46,819 --> 00:06:50,400
which is pretty cool because that means
you can use that

104
00:06:50,400 --> 00:06:54,438
any texteditor you like I mean I've been
using it in sublime

105
00:06:54,439 --> 00:06:57,599
which is awesome but really there is no

106
00:06:57,599 --> 00:07:02,120
special support from sublime so if you
want use it with save

107
00:07:02,120 --> 00:07:05,580
in vim you can do that

108
00:07:05,580 --> 00:07:09,080
.

109
00:07:09,080 --> 00:07:12,289
.

110
00:07:12,289 --> 00:07:15,509
 and when I saved the file

111
00:07:15,509 --> 00:07:19,409
the tests are executed if I comment down

112
00:07:19,409 --> 00:07:23,680
this line our unit test is failing

113
00:07:23,680 --> 00:07:28,669
I'm bring it back it's back

114
00:07:28,669 --> 00:07:31,990
cool soon the last thing 

115
00:07:31,990 --> 00:07:35,729
I'm gonna kill testicular and you can
see that

116
00:07:35,729 --> 00:07:41,110
the browser has been killed as well

117
00:07:41,110 --> 00:07:43,320
to run karma from webstorm

118
00:07:43,320 --> 00:07:46,710
we need to create their run configuration tool and click here

119
00:07:46,710 --> 00:07:50,840
edit configurations and we add node.js configuration

120
00:07:50,840 --> 00:07:54,969
let's call it  testacular server

121
00:07:54,970 --> 00:07:58,670
and really this is just a name so you
can pick up anything you like

122
00:07:58,670 --> 00:08:01,990
after now  thats a 

123
00:08:01,990 --> 00:08:05,130
that's kind of silly but this needs to be
an absolute path

124
00:08:05,130 --> 00:08:09,270
to node.js binary. Working
directory

125
00:08:09,270 --> 00:08:13,990
this is ok.  this is the  project folder
and path to node.js App

126
00:08:13,990 --> 00:08:18,020
that again needs to be an absolute path
to karma

127
00:08:18,020 --> 00:08:22,570
so you can see amusing nvm which is
really nice

128
00:08:22,570 --> 00:08:26,920
strips for managing multiple versions of
node if you're not using in NVM and

129
00:08:26,920 --> 00:08:32,300
this gonna be probably
something like /usr/local/bin/node/karma

130
00:08:32,300 --> 00:08:35,979
and application parameters

131
00:08:35,980 --> 00:08:39,560
we need to pass the configuration file


132
00:08:39,560 --> 00:08:44,439
in this case you're going to execute
angularJS unit test so we're going to pass

133
00:08:44,440 --> 00:08:46,720
angularFiles.js

134
00:08:46,720 --> 00:08:50,330
.

135
00:08:50,330 --> 00:08:54,430
let's create one more configuration because this time

136
00:08:54,430 --> 00:08:58,250
I wanna show you different mean of
triggering the tests.

137
00:08:58,250 --> 00:09:03,170
we are not going to watch the files but, we're going to trigger the test manually

138
00:09:03,170 --> 00:09:06,229
soon let's creat 'karma run'

139
00:09:06,230 --> 00:09:09,260
again "path to node", that's

140
00:09:09,260 --> 00:09:13,630
the absolute path to nodejs binary
"working directory" in some current

141
00:09:13,630 --> 00:09:14,770
project folder

142
00:09:14,770 --> 00:09:17,949
and "path to node app"  that's going to be

143
00:09:17,950 --> 00:09:21,970
testicular-run

144
00:09:21,970 --> 00:09:27,570
apply and you're all set .
before we start testicular let me show you AuglarFiles.js

145
00:09:27,570 --> 00:09:31,110
because that's the test configuration file

146
00:09:31,110 --> 00:09:34,140
you can see there's a bunch of files at the end

147
00:09:34,140 --> 00:09:37,210
of the file there is autoWatch is true

148
00:09:37,210 --> 00:09:40,720
so let's change it to false 
I mean if you like

149
00:09:40,720 --> 00:09:45,250
you can use true to to watched the files
But i want to show you differently

150
00:09:45,250 --> 00:09:49,890
and browsers thats  ChromeCanary, let's use chrome 

151
00:09:49,890 --> 00:09:53,480
stable as well and we do

152
00:09:53,480 --> 00:10:00,390
testacular server let's start to server

153
00:10:00,390 --> 00:10:03,790
let's open source code

154
00:10:03,790 --> 00:10:08,349
and I do change and save the file and
nothing happens

155
00:10:08,350 --> 00:10:12,880
because we are not watching the files so
you need to trigger the

156
00:10:12,880 --> 00:10:15,939
run manually, let's do "karma run"

157
00:10:15,940 --> 00:10:20,840
and there you go you execute all angular unit test which is over

158
00:10:20,840 --> 00:10:24,940
go where 1500 unit test in each browsers

159
00:10:24,940 --> 00:10:29,460
okay let's let's fail something

160
00:10:29,460 --> 00:10:34,190
let's comment out this line that should felt something

161
00:10:34,190 --> 00:10:37,810
there you go be and this is

162
00:10:37,810 --> 00:10:41,459
really good about webstorm because there
is this

163
00:10:41,460 --> 00:10:45,540
error and you can see this is a
clickable link so you can click

164
00:10:45,540 --> 00:10:48,810
this guy and it will open the file

165
00:10:48,810 --> 00:10:52,390
an directly go to correct line

166
00:10:52,390 --> 00:10:56,630
which is really cool and this case

167
00:10:56,630 --> 00:10:59,890
I thought it's super useful but

168
00:10:59,890 --> 00:11:03,460
imagine something I'm think usefull and
split this guy

169
00:11:03,460 --> 00:11:07,020
and lets let's just executed this

170
00:11:07,020 --> 00:11:12,300
failing unit test we use iit to individual executives just this unit test

171
00:11:12,300 --> 00:11:16,329
and let's refactor this a little bit


172
00:11:16,330 --> 00:11:19,550
we extract this into

173
00:11:19,550 --> 00:11:24,890
of mergeHead and let's throw 

174
00:11:24,890 --> 00:11:28,020
an error here

175
00:11:28,020 --> 00:11:31,120
we execute 

176
00:11:31,120 --> 00:11:35,760
this unit is again and there you go
there's a full call stack

177
00:11:35,760 --> 00:11:39,590
and I'll all these links are clickable
links

178
00:11:39,590 --> 00:11:43,130
so there's a call to 

179
00:11:43,130 --> 00:11:46,689
angular forEach you wanna see that
just click this link

180
00:11:46,690 --> 00:11:49,840
and there you go we are inside the ... I'm

181
00:11:49,840 --> 00:11:53,530
sorry it was different

182
00:11:53,530 --> 00:11:56,630
yeah this one and we are in different file

183
00:11:56,630 --> 00:11:59,790
inside forEach definition which is
super cool

184
00:11:59,790 --> 00:12:04,260
I mean this is really great about webstorm
through this you can see this function

185
00:12:04,260 --> 00:12:08,080
you want to see the definitions this
come on click this function

186
00:12:08,080 --> 00:12:12,230
and there you go I mean webstorm really understand JavaScript

187
00:12:12,230 --> 00:12:15,400
and that's cool okay guys

188
00:12:15,400 --> 00:12:20,350
so this was testicular with webstorm

189
00:12:20,350 --> 00:12:24,080
to debug from webstorm we need to
create the debug configuration

190
00:12:24,080 --> 00:12:27,519
so let's edit the configuartion and

191
00:12:27,519 --> 00:12:31,350
 add javascript debug

192
00:12:31,350 --> 00:12:36,079
let's call it Karma debug

193
00:12:36,079 --> 00:12:40,890
URL http://localhost:8080/debug.html

194
00:12:40,890 --> 00:12:44,290
you can pick Chrome or Firefox

195
00:12:44,290 --> 00:12:48,300
and set this remote URL to 

196
00:12:48,300 --> 00:12:51,459
your local

197
00:12:51,459 --> 00:12:55,810
angurlar project of like this

198
00:12:55,810 --> 00:13:01,199
apply and you're all set so let's run
to server first

199
00:13:01,200 --> 00:13:05,010
and one say

200
00:13:05,010 --> 00:13:08,670
we want to debug this unit test all over there

201
00:13:08,670 --> 00:13:12,810
so we use iit to execute just as one unit test

202
00:13:12,810 --> 00:13:16,140
and let's put the breakpoint here

203
00:13:16,140 --> 00:13:20,160
let's do karma debug

204
00:13:20,160 --> 00:13:24,189
and here you can see webstorm starts


205
00:13:24,190 --> 00:13:27,820
this chrome and there you go

206
00:13:27,820 --> 00:13:31,089
yes very much all the debugging tools
that you would have

207
00:13:31,089 --> 00:13:34,680
if you were debugging in chrome 

208
00:13:34,680 --> 00:13:37,779
but this has advantage that you have

209
00:13:37,779 --> 00:13:41,270
nice code highlighting and

210
00:13:41,270 --> 00:13:45,689
you have easy navigation between files
like you see forEach

211
00:13:45,690 --> 00:13:46,450
just come on and

212
00:13:46,450 --> 00:13:49,620
click and there you go you are inside forEach

213
00:13:49,620 --> 00:13:52,980
right, so let's debug this unit test 

214
00:13:52,980 --> 00:13:56,620
let's watch parsed.key

215
00:13:56,620 --> 00:14:00,709
which is undefined at this point

216
00:14:00,709 --> 00:14:06,560
step into this function so you can see it
still undefined that now

217
00:14:06,560 --> 00:14:09,579
we already parsed the first header , so it's 'a'

218
00:14:09,579 --> 00:14:13,510
let's do next 

219
00:14:13,510 --> 00:14:16,640
let's step into

220
00:14:16,640 --> 00:14:20,640
and there you go it's "a, b"

221
00:14:20,640 --> 00:14:24,459
so you get it
cool

222
00:14:24,459 --> 00:14:28,300
One Note if you want to debug again

223
00:14:28,300 --> 00:14:31,880
it's easy to go to  browser and fresh that

224
00:14:31,880 --> 00:14:36,199
instead of restarting the browser so we
can see 

225
00:14:36,199 --> 00:14:40,079
we are debugging again so you can again

226
00:14:40,079 --> 00:14:44,770
step into and stuff like that okay guys

227
00:14:44,770 --> 00:14:49,140
so this was debug from  webstorm and
thank you very much for watching

