1
00:00:02,110 --> 00:00:05,979
大家好，我是Vojta Jina，今天我给大家介绍下Karma

2
00:00:05,979 --> 00:00:10,190
一款Javascript测试执行工具，Karmar给我们Angular的开发带来了很多乐趣。

3
00:00:10,190 --> 00:00:15,059
我们一直很喜欢采用TDD的开发模式

4
00:00:15,060 --> 00:00:18,100
但是我们不能是用Mocha等Node.js的测试框架

5
00:00:18,100 --> 00:00:21,150
因为Angular中需要大量的DOM操作

6
00:00:21,150 --> 00:00:25,150
我们必须保证这些操作在各个浏览器都能正常运行，

7
00:00:25,150 --> 00:00:28,810
我们需要在真实的浏览器上执行测试。

8
00:00:28,810 --> 00:00:31,810
Karma就做到了这点

9
00:00:31,810 --> 00:00:35,690
它能够在真实的浏览器中执行测试用例

10
00:00:35,690 --> 00:00:38,960
包括手机和平板的浏览器

11
00:00:38,960 --> 00:00:44,750
这个教程的目的演示如何用karma在开发过程中测试javascript

12
00:00:44,750 --> 00:00:50,910
或者将karma添加到CI(持续集成)中去。

13
00:00:50,910 --> 00:00:53,559
Karma的安装其实非常的简单

14
00:00:53,559 --> 00:00:57,320
假设你已经安装好了node.js


15
00:00:57,320 --> 00:00:58,109
如果没就去 nodejs.org

16
00:00:58,109 --> 00:01:01,640
直接下载安装

17
00:01:01,640 --> 00:01:05,009
安装好后，进入命令行

18
00:01:05,009 --> 00:01:10,289
"npm install -g karma"  

19
00:01:10,289 --> 00:01:11,740
安装 karma到node的全局模块中

20
00:01:11,740 --> 00:01:14,970
(*nix 里面可能需要sudo 执行)

21
00:01:14,970 --> 00:01:18,990
NPM是node.js的包管理工具

22
00:01:18,990 --> 00:01:23,119
随Node.js一起安装的，

23
00:01:23,119 --> 00:01:24,000
如果有node.js就会有NPM

24
00:01:24,000 --> 00:01:27,460
好，现在进入正题

25
00:01:27,460 --> 00:01:34,460
我们已经有了testacular(karma)了

26
00:01:34,729 --> 00:01:37,000
我们在进去angular的教程项目

27
00:01:37,000 --> 00:01:40,490

我们先用testicular(Karma)来执行它单元测试。

28
00:01:40,490 --> 00:01:45,089
我们唯一需要的就是一个配置文件

29
00:01:45,090 --> 00:01:49,880
建议你到github上下载默认配置文件
(最新的karma采用类似npm init的方式来创建配置文件,命令"karma init")


30
00:01:49,880 --> 00:01:53,390
 

31
00:01:53,390 --> 00:01:56,580
 

32
00:01:56,580 --> 00:02:00,259
打开教程项目

33
00:02:00,259 --> 00:02:04,810
这个是配置文件

34
00:02:04,810 --> 00:02:09,110
这里第一个配置项目

35
00:02:09,110 --> 00:02:12,190


36
00:02:12,190 --> 00:02:15,959
一个文件数组，

37
00:02:15,959 --> 00:02:21,430
告诉karma你需要它关注的文件。

38
00:02:21,430 --> 00:02:22,750
指定文件路径的时候可以使用通配符

39
00:02:22,750 --> 00:02:26,350
文件的路径

40
00:02:26,350 --> 00:02:30,920
也可以是相对路劲和绝对路径

41
00:02:30,920 --> 00:02:34,790
相对路径的解析是基于 basePath这个配置项的

42
00:02:34,790 --> 00:02:38,100
basePath这项

43
00:02:38,100 --> 00:02:41,320
也可以是绝对路径或者相对路径

44
00:02:41,320 --> 00:02:45,579
相对路径的话是基于当前配置文件的位置

45
00:02:45,579 --> 00:02:49,130


46
00:02:49,130 --> 00:02:52,470
在我们这个例子里面这项为空

47
00:02:52,470 --> 00:02:55,590
继续看

48
00:02:55,590 --> 00:02:59,320
autoWatch这项 ,autoWatch为true

49
00:02:59,320 --> 00:03:03,739
这项非常重要，autoWatch为true

50
00:03:03,739 --> 00:03:08,160
就是让Karma一直监视文件，

51
00:03:08,160 --> 00:03:12,560
如果files项中的文件有任何改动karma就会执行所有的测试。

52
00:03:12,560 --> 00:03:16,060
继续看

53
00:03:16,060 --> 00:03:20,790
最后一个配置项 "browsers". 我们填入 "ChromeCanary"

54
00:03:20,790 --> 00:03:23,820
这样配置的话

55
00:03:23,820 --> 00:03:28,720
当karma启动的时候，它也启动ChromeCanary来执行测试代码

56
00:03:28,720 --> 00:03:34,840
配置文件里面还有一些其他的配置选项

57
00:03:34,840 --> 00:03:38,579
基本保持默认选项就好了

58
00:03:38,579 --> 00:03:42,160
 


59
00:03:42,160 --> 00:03:46,269
因为目前我们还用不到

60
00:03:46,269 --> 00:03:51,359
现在我们到命令行启动karma

61
00:03:51,359 --> 00:03:55,130
启动是需要输入配置文件作为参数

62
00:03:55,130 --> 00:03:59,060
可以看到chrome被启动

63
00:03:59,060 --> 00:04:04,530
我们到angular的过滤器代码，只要我们一保存文件

64
00:04:04,530 --> 00:04:07,859
单元测试就马上执行

65
00:04:07,859 --> 00:04:11,090
这个过滤器的功能

66
00:04:11,090 --> 00:04:15,350
是将一个布尔值转换成

67
00:04:15,350 --> 00:04:19,340
一个UTF8的符号的过滤器

68
00:04:19,340 --> 00:04:22,619
如果是false就是叉，true是勾

69
00:04:22,620 --> 00:04:26,830
现在我们要扩展它的功能

70
00:04:26,830 --> 00:04:30,430
如果输入的参数是undefined就返回问号

71
00:04:30,430 --> 00:04:34,090
打开对应的单元测试 

72
00:04:34,090 --> 00:04:37,739
发现我们用的是Jasmine测试框架


73
00:04:37,740 --> 00:04:41,900
Jasime是款很棒的"测试框架"

74
00:04:41,900 --> 00:04:45,229
karma只是一个“测试执行工具”

75
00:04:45,229 --> 00:04:48,250
所以你可以在karma中使用

76
00:04:48,250 --> 00:04:51,389
任何你喜欢的框架

77
00:04:51,389 --> 00:04:54,949
我们喜欢Jasmine所以就用了它。

78
00:04:54,949 --> 00:04:58,169
开始写case
(看屏幕)

79
00:04:58,169 --> 00:05:04,669
(看屏幕)

80
00:05:04,669 --> 00:05:08,889
(看屏幕)

81
00:05:08,889 --> 00:05:12,380
(看屏幕)

82
00:05:12,380 --> 00:05:16,690
现在我们有了一个失败的测试用例了

83
00:05:16,690 --> 00:05:21,750
先让我给你看点比较有用的工具

84
00:05:21,750 --> 00:05:25,340
dump 函数

85
00:05:25,340 --> 00:05:30,698
它可以dump信息到命令行里面，很cool吧。

86
00:05:30,699 --> 00:05:34,240
所有的测试都是在浏览器中执行的。

87
00:05:34,240 --> 00:05:39,479
所以你直接可以去Chrome的控制台

88
00:05:39,479 --> 00:05:43,389
如果你喜欢用console.log的话

89
00:05:43,389 --> 00:05:49,190
我们也可以用

90
00:05:49,190 --> 00:05:53,259


91
00:05:53,259 --> 00:05:57,919
(拼写错误 应该是console.log)

92
00:05:57,919 --> 00:06:02,669


93
00:06:02,669 --> 00:06:06,590
打印出了undefined

94
00:06:06,590 --> 00:06:10,469
如果你喜欢用console也没关系

95
00:06:10,469 --> 00:06:15,000
但是能够一直呆在编辑器里面是最好了

96
00:06:15,000 --> 00:06:20,080
这种情况下dump就非常的有用。

97
00:06:20,080 --> 00:06:24,539
现在我们来实现新的转换功能

98
00:06:24,539 --> 00:06:29,460
(码ing)

99
00:06:29,460 --> 00:06:33,388
(码ing)

100
00:06:33,389 --> 00:06:37,780
好了

101
00:06:37,780 --> 00:06:42,289
搞定

102
00:06:42,289 --> 00:06:46,818
这就是你如何在命令行使用karma的演示

103
00:06:46,819 --> 00:06:50,400
这样的话，你就可以在任何编辑器中使用karma了

104
00:06:50,400 --> 00:06:54,438
我一直是在sublime里面用的

105
00:06:54,439 --> 00:06:57,599
但是sublime中

106
00:06:57,599 --> 00:07:02,120
没有什么特别的插件支持

107
00:07:02,120 --> 00:07:05,580
如果在vim里面的话就可以了

108
00:07:05,580 --> 00:07:09,080
.

109
00:07:09,080 --> 00:07:12,289
.

110
00:07:12,289 --> 00:07:15,509
保存文件的触发karma执行测试

111
00:07:15,509 --> 00:07:19,409
如果我们注释掉这行代码

112
00:07:19,409 --> 00:07:23,680
测试就失败了

113
00:07:23,680 --> 00:07:28,669
去掉注释，测试又全通过了

114
00:07:28,669 --> 00:07:31,990
最后 

115
00:07:31,990 --> 00:07:35,729
Ctrl+C 终止 karma

116
00:07:35,729 --> 00:07:41,110
启动的chrome也终止了

117
00:07:41,110 --> 00:07:43,320
在Webstorm中执行karma

118
00:07:43,320 --> 00:07:46,710
我们需要先创建一个执行配置。

119
00:07:46,710 --> 00:07:50,840
点击"edit configurations" 添加一个 "node.js configuration"

120
00:07:50,840 --> 00:07:54,969
命名为 testacular server

121
00:07:54,970 --> 00:07:58,670
这个名字可以随意取

122
00:07:58,670 --> 00:08:01,990
接着

123
00:08:01,990 --> 00:08:05,130
用绝对路径填写node.js的路径

124
00:08:05,130 --> 00:08:09,270
工作目录

125
00:08:09,270 --> 00:08:13,990
就是当前项目目录，"path to node.js App"

126
00:08:13,990 --> 00:08:18,020
需要指向karma路径

127
00:08:18,020 --> 00:08:22,570
这里推荐下NVM

128
00:08:22,570 --> 00:08:26,920
如果你需要在多个node版本上工作,NVM非常有用

129
00:08:26,920 --> 00:08:32,300
如果你没有使用NVM的路径大概是
/usr/local/bin/node/karma

130
00:08:32,300 --> 00:08:35,979
"application parameters"

131
00:08:35,980 --> 00:08:39,560
我们需要填配置文件


132
00:08:39,560 --> 00:08:44,439
这里我们要执行angular的单元测试，所以这个参数填 

133
00:08:44,440 --> 00:08:46,720
angularFiles.js

134
00:08:46,720 --> 00:08:50,330
.

135
00:08:50,330 --> 00:08:54,430
我们再创建一个配置

136
00:08:54,430 --> 00:08:58,250
因为我要演示不同方式来触发karma执行

137
00:08:58,250 --> 00:09:03,170
这个配置里面我们就不监视文件变化，而是采用手动执行的方式

138
00:09:03,170 --> 00:09:06,229
配置一个'karma run'

139
00:09:06,230 --> 00:09:09,260
(和上一个配置一样)

140
00:09:09,260 --> 00:09:13,630
(和上一个配置一样)

141
00:09:13,630 --> 00:09:14,770
(和上一个配置一样)

142
00:09:14,770 --> 00:09:17,949
"path to node app" 为

143
00:09:17,950 --> 00:09:21,970
testicular-run 
(karma中已经没有karma-run)

144
00:09:21,970 --> 00:09:27,570
点apply 设置好配置。
在启动测试先看看 AuglarFiles.js

145
00:09:27,570 --> 00:09:31,110
这个配置文件

146
00:09:31,110 --> 00:09:34,140
在配置文件的最后

147
00:09:34,140 --> 00:09:37,210
autoWatch 是 true

148
00:09:37,210 --> 00:09:40,720
我们把它改成 false

149
00:09:40,720 --> 00:09:45,250
不改也没有关系，为了演示的原因修改为false

150
00:09:45,250 --> 00:09:49,890
“browsers”这项有ChromeCanary,

151
00:09:49,890 --> 00:09:53,480
我们再添加chrome

152
00:09:53,480 --> 00:10:00,390
启动karma server

153
00:10:00,390 --> 00:10:03,790
打开代码

154
00:10:03,790 --> 00:10:08,349
改动下代码，保存，什么事情都没发生

155
00:10:08,350 --> 00:10:12,880
因为我们没有监视代码，

156
00:10:12,880 --> 00:10:15,939
我们要手动启动，运行"karma run"

157
00:10:15,940 --> 00:10:20,840
angular的所有case就开始执行了。

158
00:10:20,840 --> 00:10:24,940
1500个单元测试在chrome和ChromeCanary中执行完毕

159
00:10:24,940 --> 00:10:29,460
OK,先来搞挂个测试

160
00:10:29,460 --> 00:10:34,190
先注释这行代码，这样测试肯定会失败

161
00:10:34,190 --> 00:10:37,810
再执行下测试

162
00:10:37,810 --> 00:10:41,459
webstorm厉害的地方就体现出来了

163
00:10:41,460 --> 00:10:45,540
你看到的每个错误都一个可以跳转的链接

164
00:10:45,540 --> 00:10:48,810
点击一个错误，webstorm会打开对应的文件

165
00:10:48,810 --> 00:10:52,390
跳转到对应的行

166
00:10:52,390 --> 00:10:56,630
很赞吧

167
00:10:56,630 --> 00:10:59,890
接下来我再介绍些更酷的东西

168
00:10:59,890 --> 00:11:03,460
先做个分屏

169
00:11:03,460 --> 00:11:07,020
使用jasmine的itt

170
00:11:07,020 --> 00:11:12,300
这样就能只执行当前这个失败的测试

171
00:11:12,300 --> 00:11:16,329
先来做点简单的重构

172
00:11:16,330 --> 00:11:19,550
先提取函数 mergeHead

173
00:11:19,550 --> 00:11:24,890


174
00:11:24,890 --> 00:11:28,020
抛出一个错误

175
00:11:28,020 --> 00:11:31,120
再执行一次测试

176
00:11:31,120 --> 00:11:35,760
这次你看到了一个调用栈了吧

177
00:11:35,760 --> 00:11:39,590
这些链接都是可以点击的

178
00:11:39,590 --> 00:11:43,130
这有个forEach的调用

179
00:11:43,130 --> 00:11:46,689
点击下

180
00:11:46,690 --> 00:11:49,840
(误操作了)

181
00:11:49,840 --> 00:11:53,530
(误操作了) 

182
00:11:53,530 --> 00:11:56,630
(误操作了)

183
00:11:56,630 --> 00:11:59,790
跳转到forEach的定义了
赞吧！

184
00:11:59,790 --> 00:12:04,260
webstorm作为javascript的编辑器确实很不错

185
00:12:04,260 --> 00:12:08,080
需要查看函数定义的时候，只需要点击函数名就可以

186
00:12:08,080 --> 00:12:12,230
webstorm真的很懂Javascript

187
00:12:12,230 --> 00:12:15,400
以上内容就是在webstorm中使用karma

188
00:12:15,400 --> 00:12:20,350


189
00:12:20,350 --> 00:12:24,080
使用webstorm debug需要创建一个debug的配置

190
00:12:24,080 --> 00:12:27,519
现在开始编辑这个Javascript debug配置

191
00:12:27,519 --> 00:12:31,350

192
00:12:31,350 --> 00:12:36,079
命名为 Karma debug

193
00:12:36,079 --> 00:12:40,890
URL http://localhost:8080/debug.html

194
00:12:40,890 --> 00:12:44,290
可以使用 Chrome 或者 Firefox

195
00:12:44,290 --> 00:12:48,300
将remote URL指向 auglar的本地路径

196
00:12:48,300 --> 00:12:51,459
将remote URL指向 auglar的本地路径

197
00:12:51,459 --> 00:12:55,810
将remote URL指向 auglar的本地路径

198
00:12:55,810 --> 00:13:01,199
应用这个配置，启动debug 服务

199
00:13:01,200 --> 00:13:05,010

200
00:13:05,010 --> 00:13:08,670
我们不需要debug所有的单元测试

201
00:13:08,670 --> 00:13:12,810
所以我用 iit 单独执行需要调试的单元测试

202
00:13:12,810 --> 00:13:16,140
在代码中加入断点

203
00:13:16,140 --> 00:13:20,160
启动karma debug

204
00:13:20,160 --> 00:13:24,189
webstorm启动了 chrome


205
00:13:24,190 --> 00:13:27,820
webstorm启动了 chrome

206
00:13:27,820 --> 00:13:31,089
在webstorm你可以使用很多的debug工具

207
00:13:31,089 --> 00:13:34,680
你也可以在chrome中debug

208
00:13:34,680 --> 00:13:37,779
但是webstorm还有很多优势

209
00:13:37,779 --> 00:13:41,270
比如语法高亮 

210
00:13:41,270 --> 00:13:45,689
文件跳转，像想刚才forEach函数一样

211
00:13:45,690 --> 00:13:46,450
只要轻松点点就能跳转到函数定义

212
00:13:46,450 --> 00:13:49,620
只要轻松点点就能跳转到函数定义

213
00:13:49,620 --> 00:13:52,980
好，我们现在开始debug
 

214
00:13:52,980 --> 00:13:56,620
添加监视变量 parsed.key

215
00:13:56,620 --> 00:14:00,709
当前是undefined

216
00:14:00,709 --> 00:14:06,560
单步调试进入函数，parsed.key 的值还是undefined

217
00:14:06,560 --> 00:14:09,579
第一个头已经解析了,parsed.key为 “a”

218
00:14:09,579 --> 00:14:13,510
继续调试


219
00:14:13,510 --> 00:14:16,640
继续调试

220
00:14:16,640 --> 00:14:20,640
parsed.key为 "a, b"

221
00:14:20,640 --> 00:14:24,459
好发现问题了
赞！

222
00:14:24,459 --> 00:14:28,300
注意；如果你还想再调试一次

223
00:14:28,300 --> 00:14:31,880
只要刷新下浏览器即可

224
00:14:31,880 --> 00:14:36,199
不用再重新启动debug服务这么麻烦

225
00:14:36,199 --> 00:14:40,079
看，我重新进入debug环境

226
00:14:40,079 --> 00:14:44,770
继续单步调试。

227
00:14:44,770 --> 00:14:49,140
这些就是用webstorm调试的内容
谢谢观看
翻译: Shu Pengfei
stormslowly.github.io


